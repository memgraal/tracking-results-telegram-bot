from threading import Thread # —ç—Ç–æ—Ç –º–æ–∂—É–ª—å –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –º—ã —Å–æ–±–∏—Ä–∞–µ–º—Å—è –¥–æ–±–∞–≤–ª—è—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—à–µ–Ω–∏–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–æ–π –ø–µ—Ä–µ–æ–¥–∏—á–Ω–æ—Å—Ç—å—é
from telebot import TeleBot
from telebot.types import Message, ReplyKeyboardMarkup, ReplyKeyboardRemove, Document
from Config import TEACHER_CHAT_ID, BOT_TOKEN
import pandas as pd
import requests
from time import sleep

bot = TeleBot(token = BOT_TOKEN)


                                    # —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —É—á–∏—Ç–µ–ª—é –æ —É—á–µ–Ω–∏–∫–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é –Ω–∏–∑–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç
def SendResultsMessage(self) -> list[tuple]:
    Arr_of_users_negative_results = []

    DataFrame = pd.DataFrame(pd.read_excel("/curr_CSV_file/data.xlsx")) 
    
    for index, row in DataFrame.iterrows():
        #
        # –§—É–Ω–∫—Ü–∏–∏–æ–Ω–∞–ª –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π(–ø–æ–¥—É–º–∞—é, –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ —Ü–∏–∫–ª, –∞ —É—Å–ª–æ–≤–∏–µ –≤ —Å–∞–º–æ–º pandas)
        # –∏ –∑–∞–ø–∏—Å—å –∏—Ö –≤ Arr_of_users_negative_results –≤ –≤–∏–¥–µ (–∏–º—è, —Ñ–∞–º–∏–ª–∏—è, –≥—Ä—É–ø–ø–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
        pass    
    return Arr_of_users_negative_results

def Send_Students_info_to_teacher():
    while True:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        All_results = SendResultsMessage()
        for x in All_results:
            for x1, x2, x3, x4 in x:
                url_req = "https://api.telegram.org/bot" + f"{BOT_TOKEN}" + "/sendMessage" + "?chat_id=" + f"{TEACHER_CHAT_ID}" + "&text=" + f"–°—é–¥–∞ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
                requests.get(url_req)
        
        # –∂–¥–µ–º 3 –¥–Ω—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è 
        sleep(259200)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# message_thread = Thread(target = Send_Students_info_to_teacher)
# message_thread.start()




# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start', 'hello'])
def start(message: Message) -> None:
    if str(message.chat.id) == TEACHER_CHAT_ID:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        replace_CSV = "–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π csv –ª–∏—Å—Ç"
        show_unsatisfactory_students_results = "–ø–æ–∫–∞–∑–∞—Ç—å —Å–Ω–∏–∂–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—á–µ–Ω–∏–∫–æ–≤"

        markup.add(replace_CSV, show_unsatisfactory_students_results)
        
        bot.send_message(message.chat.id, text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}üòÄ", reply_markup = markup)
        return 
    
    markup = ReplyKeyboardMarkup()
    StudentStats = "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    markup.add(StudentStats)
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} —ç—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ Max.Edu.", reply_markup = markup)





# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
@bot.message_handler(content_types=['document'])
def handle_document(message: Message) -> None:
    if str(message.chat.id) == TEACHER_CHAT_ID:
        if message.document.file_name.endswith('.csv'):
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            try:
                with open('data.csv', 'wb') as f:
                    f.write(downloaded_file)

                new_dataFrame = pd.read_csv('data.csv')
                with pd.ExcelWriter('curr_CSV_file/data.xlsx') as new_excel:
                    new_dataFrame.to_excel(new_excel, index=False)

                bot.send_message(message.chat.id, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")

            except Exception as e:
                bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        else:
            bot.send_message(message.chat.id, "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ CSV-—Ñ–∞–π–ª.")

        # –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–∂–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è ReplyKeyboardMarkup
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        replace_CSV = "–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π csv –ª–∏—Å—Ç"
        show_unsatisfactory_students_results = "–ø–æ–∫–∞–∑–∞—Ç—å —Å–Ω–∏–∂–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—á–µ–Ω–∏–∫–æ–≤"
        markup.add(replace_CSV, show_unsatisfactory_students_results)

        bot.send_message(message.chat.id, "üí•", reply_markup = markup)
        
        
    else:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º.")




                                                            # –†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
                                # —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@bot.message_handler(regexp = "–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π csv –ª–∏—Å—Ç")
def replace_csv(message: Message) -> None:
    if str(message.chat.id) == TEACHER_CHAT_ID:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π CSV-—Ñ–∞–π–ª.", reply_markup = ReplyKeyboardRemove())
    else:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º.")

@bot.message_handler(regexp = "–ø–æ–∫–∞–∑–∞—Ç—å —Å–Ω–∏–∂–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—á–µ–Ω–∏–∫–æ–≤")
def replace_csv(message: Message) -> None:
    if str(message.chat.id) == TEACHER_CHAT_ID:
        bot.send_message(message.chat.id, "‚Ü¥")
        #
        #
        #   –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –ø–æ–∫–∞–∑–∞ —É—á–µ–Ω–∏–∫–æ–≤ —Å–æ —Å–Ω–∏–∂–µ–Ω–Ω—ã–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è –∏ —Ç–¥.
        #
    else:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º.")






                                # —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É—á–µ–Ω–∏–∫–∞
@bot.message_handler(regexp = "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")    # –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
def student_stats(message: Message) -> None:
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã —Ä–∞–∑–¥–µ–ª—å–Ω–æ.")
    bot.send_message(message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ", reply_markup = ReplyKeyboardRemove())
    bot.register_next_step_handler(message, get_name)

def get_name(message: Message) -> None:
    student_name = message.text
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é: ")
    bot.register_next_step_handler(message, get_surname, student_name)

def get_surname(message: Message, student_name: str) -> None:       # –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
    student_surname = message.text
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã: ")
    bot.register_next_step_handler(message, get_group_number, student_name, student_surname)

def get_group_number(message: Message, student_name: str, student_surname: str) -> None:        # –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    student_group = message.text

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
    # ...
    # ...
    # ...

    # –ü–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–µ —Å—Ç—É–¥–µ–Ω—Ç—É
    
    markup = ReplyKeyboardMarkup() # –≤–æ–∑—Ä–∞—â–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è ReplyKeyboardMarkup –¥–ª—è —É—á–µ–Ω–∏–∫–∞ 
    StudentStats = "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    markup.add(StudentStats)

    bot.send_message(message.chat.id, f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ—Ç–æ–≤–∞!: {student_name} {student_surname} {student_group}", reply_markup = markup)




bot.polling()
